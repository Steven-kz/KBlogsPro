const t=JSON.parse('{"key":"v-6b20f70a","path":"/interview/java/filter.html","title":"拦截器和过滤器的区别","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-04T00:00:00.000Z","lastUpdated":true,"contributors":true,"description":"拦截器和过滤器的区别 执行顺序 ：Filter 处理中 -&gt; Interceptor 前置 -&gt; 我是controller -&gt; Interceptor 处理中 -&gt; Interceptor 处理后 一、Filter 实现Filter接口 init() doFilter() destroy() init() ：该方法在容器启动初始化过滤器时被调用，它在 Filter 的整个生命周期只会被调用一次。注意：这个方法必须执行成功，否则过滤器会不起作用。 doFilter() ：容器中的每一次请求都会调用该方法， FilterChain 用来调用下一个过滤器 Filter。 destroy()： 当容器销毁 过滤器实例时调用该方法，一般在方法中销毁或关闭资源，在过滤器 Filter 的整个生命周期也只会被调用一次","head":[["meta",{"property":"og:url","content":"https://steven-kz.github.io/KBlogsPro/KBlogsPro/interview/java/filter.html"}],["meta",{"property":"og:site_name","content":"Flowers"}],["meta",{"property":"og:title","content":"拦截器和过滤器的区别"}],["meta",{"property":"og:description","content":"拦截器和过滤器的区别 执行顺序 ：Filter 处理中 -&gt; Interceptor 前置 -&gt; 我是controller -&gt; Interceptor 处理中 -&gt; Interceptor 处理后 一、Filter 实现Filter接口 init() doFilter() destroy() init() ：该方法在容器启动初始化过滤器时被调用，它在 Filter 的整个生命周期只会被调用一次。注意：这个方法必须执行成功，否则过滤器会不起作用。 doFilter() ：容器中的每一次请求都会调用该方法， FilterChain 用来调用下一个过滤器 Filter。 destroy()： 当容器销毁 过滤器实例时调用该方法，一般在方法中销毁或关闭资源，在过滤器 Filter 的整个生命周期也只会被调用一次"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-11T10:33:06.000Z"}],["meta",{"property":"article:author","content":"Kou"}],["meta",{"property":"article:published_time","content":"2022-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-11T10:33:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拦截器和过滤器的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-11T10:33:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kou\\",\\"url\\":\\"https://steven-kz.github.io/KBlogsPro/\\"}]}"]]},"headers":[{"level":2,"title":"一、Filter","slug":"一、filter","link":"#一、filter","children":[]},{"level":2,"title":"二、Intercaputer","slug":"二、intercaputer","link":"#二、intercaputer","children":[{"level":3,"title":"1、拦截器是什么实现的","slug":"_1、拦截器是什么实现的","link":"#_1、拦截器是什么实现的","children":[]},{"level":3,"title":"2、拦截器3个方法","slug":"_2、拦截器3个方法","link":"#_2、拦截器3个方法","children":[]},{"level":3,"title":"3、多拦截器执行顺序","slug":"_3、多拦截器执行顺序","link":"#_3、多拦截器执行顺序","children":[]}]}],"git":{"createdTime":1697020386000,"updatedTime":1697020386000,"contributors":[{"name":"kou","email":"knightbreeze@163.com","commits":1}]},"readingTime":{"minutes":1.78,"words":533},"filePathRelative":"interview/java/filter.md","localizedDate":"2022年1月4日","excerpt":"<h1> 拦截器和过滤器的区别</h1>\\n<p><img src=\\"https://steven-kz.github.io/BlogImgs/imgaes/20231011162711.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n执行顺序 ：Filter 处理中 -&gt; Interceptor 前置 -&gt; 我是controller -&gt; Interceptor 处理中 -&gt; Interceptor 处理后</p>\\n<h2> 一、Filter</h2>\\n<p>实现Filter接口 init() doFilter() destroy()<br>\\ninit() ：该方法在容器启动初始化过滤器时被调用，它在 Filter 的整个生命周期只会被调用一次。注意：这个方法必须执行成功，否则过滤器会不起作用。<br>\\ndoFilter() ：容器中的每一次请求都会调用该方法， FilterChain 用来调用下一个过滤器 Filter。<br>\\ndestroy()： 当容器销毁 过滤器实例时调用该方法，一般在方法中销毁或关闭资源，在过滤器 Filter 的整个生命周期也只会被调用一次</p>","autoDesc":true}');export{t as data};
